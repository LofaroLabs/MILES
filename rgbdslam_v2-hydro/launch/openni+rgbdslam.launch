<!-- This file shows the most important parameters in their default settings,
     to make them easily available for beginners.

     The openni driver is started automatically -->
<launch>
  <include file="$(find openni2_launch)/launch/openni2.launch"/>
  <node pkg="rgbdslam" type="rgbdslam" name="rgbdslam" cwd="node" required="true" output="screen"> 
    <!-- Input data settings-->
    <param name="config/topic_image_mono"              value="/camera/rgb/image_rect_color"/> 
    <param name="config/topic_image_depth"             value="/camera/depth_registered/sw_registered/image_rect_raw"/>
    <param name="config/topic_points"                  value=""/> <!--if empty, poincloud will be reconstructed from image and depth -->
    <param name="config/feature_detector_type"         value="SURF"/><!-- also available: SIFT, SURF, GFTT (good features to track), ORB. -->
    <param name="config/feature_extractor_type"        value="SURF"/><!-- also available: SIFT, SURF, SURF128 (extended SURF), ORB. -->
    <param name="config/nn_distance_ratio"             value="0.5"/> <!-- Feature correspondence is valid if distance to nearest neighbour is smaller than this parameter times the distance to the 2nd neighbour -->
    <param name="config/max_keypoints"                 value="600"/><!-- Extract no more than this many keypoints (not honored by SIFTGPU)-->
    <param name="config/ransac_iterations"             value="200"/>
    <param name="config/cloud_creation_skip_step"      value="4"/><!-- subsample the images' pixels (in both, width and height), when creating the cloud -->
    <param name="config/data_skip_step"                value="1"/><!-- subsample the image frames (in time) -->
<param name="config/nn_distance_ratio"             value="0.6"/> <!-- Feature correspondence is valid if distance to nearest neighbour is smaller than this parameter times the distance to the 2nd neighbour -->
      <param name="config/optimizer_skip_step"           value="1"/><!-- optimize every n-th frame -->
      <param name="config/optimizer_iterations"          value="4"/><!-- optimize every n-th frame -->
      <param name="config/store_pointclouds"             value="true"/> <!-- if, e.g., only trajectory is required, setting this to false saves lots of memory -->
      <param name="config/backend_solver"                value="pcg"/>
      <param name="config/individual_cloud_out_topic"    value="/rgbdslam/batch_clouds"/>;
      <param name="config/visualization_skip_step"       value="1"/> <!-- draw only every nth pointcloud row and line, high values require higher squared_meshing_threshold -->
      <param name="config/send_clouds_rate"              value="2"/> <!-- When sending the point clouds (e.g. to RVIZ or Octomap Server) limit sending to this many clouds per second -->
      <param name="config/min_time_reported"             value="0.01"/><!-- for easy runtime analysis -->
      <param name="config/min_translation_meter"         value="0.05"/><!-- frames with motion less than this, will be omitted -->
      <param name="config/min_rotation_degree"           value="1"/><!-- frames with motion less than this, will be omitted -->
      <param name="config/predecessor_candidates"        value="5"/><!-- search through this many immediate predecessor nodes for corrspondences -->
      <param name="config/neighbor_candidates"           value="5"/><!-- search through this many graph neighbour nodes for corrspondences -->
      <param name="config/min_sampled_candidates"        value="5"/><!-- search through this many uniformly sampled nodes for corrspondences -->
  </node>

  <!--might only work with the experimental octomap (as of May 11)-->
    <!-- Launch octomap_server for mappingL: Listens to incoming PointCloud2 data 
    and incrementally build an octomap. The data is sent out in different representations. -->
	<node pkg="octomap_server" type="octomap_server_node" name="octomap_server">
		 <param name="resolution" value="0.0250" />
		
		<!-- fixed map frame (set to 'map' if SLAM or localization running!) -->
		<param name="frame_id" type="string" value="map" />
		
		<!-- maximum range to integrate (speedup, accuracy) -->
		<param name="sensor_model/max_range" value="7.0" />
                <param name="filter_ground" value="false"/>
		<param name="ground_filter/distance " value="0.1"/>
    <param name="base_frame_id" value="/openni2_rgb_optical_frame" /> <!--needs to be set, even if not used-->
		
		<!-- data source to integrate (PointCloud2) -->
        <remap from="cloud_in" to="/rgbdslam/batch_clouds" />
	</node>
</launch>
