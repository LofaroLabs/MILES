<!-- This file demonstrates online visual odometry. The graph optimization backend
is only used to combine the motione estimates to several predecessor frames
The visual odometry will be sent as the frame "/vodom" on the "/tf" topic.
To get the cloud, you can subscribe to the online_cloud_out_topic (subsampled
according to cloud_creation_skip_step or to the original point cloud from the
openni driver.
-->
<launch>
  <!-- Delete the next line, if you start the openni driver separately -->
  <include file="$(find openni2_launch)/launch/openni2.launch"/>
  <node pkg="rviz" type="rviz" name="rviz" args="-d $(find rgbdslam)/launch/rviz.rviz"/>
  <node pkg="rgbdslam" type="rgbdslam" name="rgbdslam" cwd="node" required="true" output="screen">
	<param name="config/start_paused" value="true"/>
	<param name="config/fixed_camera" value="true"/>
	<param name="config/constrain_2d" value="true"/>
	<!-- Input data settings-->
	<param name="config/topic_image_mono" value="/camera/rgb/image_rect_color"/>
	<param name="config/topic_image_depth" value="/camera/depth/image_rect_raw"/>
	<param name="config/feature_extractor_type" value="SURF"/><!-- ORB are fastest descriptors and require no GPU -->
	<param name="config/feature_detector_type" value="SURF"/><!-- FAST can guarantee a certain range of keypoints using an adjuster-->
	<param name="config/store_pointclouds" value="true"/> <!-- if, e.g., only trajectory is required, setting this to false saves lots of memory -->
	<param name="config/individual_cloud_out_topic" value="/rgbdslam/batch_clouds"/>;
	<param name="config/send_clouds_rate" value="7"/> <!-- When sending the point clouds (e.g. to RVIZ or Octomap Server) limit sending to this many clouds per second -->
	<param name="config/detector_grid_resolution" value="10"/><!-- detect on a 2x2 grid -->
	<param name="config/max_keypoints" value="800"/><!-- Extract no more than this many keypoints -->
	<param name="config/max_matches" value="400"/><!-- Keep the best n matches (important for ORB to set lower than max_keypoints) -->
	<param name="config/min_sampled_candidates" value="1"/><!-- Frame-to-frame comparisons to random frames (big loop closures) -->
	<param name="config/predecessor_candidates" value="4"/><!-- Frame-to-frame comparisons to sequential frames-->
	<param name="config/neighbor_candidates" value="4"/><!-- Frame-to-frame comparisons to graph neighbor frames-->
	<param name="config/concurrent_node_construction" value="true"/>
	<param name="config/concurrent_edge_construction" value="true"/>
	<param name="config/nn_distance_ratio" value=".9"/><!-- set empirically -->
	<param name="config/ransac_iterations" value="100"/><!-- set empirically -->
	<param name="config/max_matches" value="200"/><!-- reduce the amount of matches (otherwise max=max_keypoints), removes outliers, speeds up ransac -->
	<param name="config/pose_relative_to" value="first"/><!-- only optimize part of graph with new constraints -->
	<param name="config/keep_all_nodes" value="true"/><!-- assume zero motion if no motion could be found and continue -->
	<param name="config/fixed_frame_name" value="/vodom"/>
	<param name="config/backend_solver" value="pcg"/> <!-- pcg is fast and good for online operation -->
	<param name="config/cloud_creation_skip_step" value="1"/> <!-- Heavily subsample point cloud during creation -->
  </node>
</launch>
